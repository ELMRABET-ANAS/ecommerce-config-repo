# Configuration du serveur
server:
  # Port 0 = port aléatoire attribué automatiquement par le système
  # Permet de lancer plusieurs instances du même service sans conflit de port
  # Les clients accèdent au service via Eureka (Load Balancer), pas directement par le port
  port: 0

spring:
  application:
    # Nom du service enregistré dans Eureka
    # Ce nom est utilisé par la gateway pour router les requêtes : lb://PRODUCT-SERVICE
    name: product-service

  # Configuration de la base de données H2 (en mémoire)
  datasource:
    url: jdbc:h2:mem:productdb  # Base de données en mémoire (données perdues au redémarrage)
    driver-class-name: org.h2.Driver
    username: sa
    password:  # Pas de mot de passe (environnement de développement uniquement)

  # Console H2 pour visualiser et gérer la base de données
  h2:
    console:
      enabled: true  # Accessible via http://localhost:<port>/h2-console
      settings:
        web-allow-others: true

  # Configuration JPA/Hibernate
  jpa:
    hibernate:
      ddl-auto: update  # Crée/met à jour automatiquement le schéma de la base de données
    show-sql: true  # Affiche les requêtes SQL dans les logs (utile pour le debug)

  # Cache + Redis
  cache:
    type: redis  # Force l'utilisation de Redis comme fournisseur de cache
  data:
    redis:
      host: localhost
      port: 6379
      # password: yourStrongPassword  # décommentez si vous sécurisez Redis

# Configuration Eureka (Service Discovery)
eureka:
  client:
    service-url:
      # URL du serveur Eureka où ce service s'enregistre
      defaultZone: http://localhost:8761/eureka/

  instance:
    # Utilise l'adresse IP au lieu du hostname pour l'enregistrement
    # Utile dans les environnements Docker ou cloud
    prefer-ip-address: true

    # ID unique pour chaque instance du service
    # ${random.value} génère un identifiant aléatoire à chaque démarrage
    # Permet de différencier les instances même si elles ont le même nom
    # Format: product-service:a1b2c3d4e5f6
    instance-id: ${spring.application.name}:${random.value}
